package com.foxconn;

import android.content.Context;
import android.content.ComponentName;
import android.content.Intent;
import android.util.Log;
import android.app.Service;
import android.os.IBinder;
import android.os.Bundle;
import android.media.MediaMetadata;
import android.media.session.MediaController;
import android.media.session.MediaSessionManager;
import android.media.session.PlaybackState;

import com.fxc.libCanWrapperNDK.IMyAidlInterface2;
import com.fxc.libCanWrapperNDK.ICanStCallback;
import android.os.RemoteException;
import android.content.ServiceConnection;

import com.fxc.ev.mediacenter.IDataChangeListener;
import com.fxc.ev.mediacenter.IMyAidlInterface;
import com.fxc.ev.driverprofile.IDriverAidlInterface;
import com.fxc.ev.driverprofile.IDriverCallback;
import com.fxc.ev.mediacenter.datastruct.MediaItem;
import com.fxc.ev.util.SystemPropUtil;
import android.graphics.Bitmap;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.car.Car;
import android.car.media.CarAudioManager;
import android.text.TextUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;

import android.hardware.radio.ProgramSelector;
import android.hardware.radio.RadioManager;
import android.hardware.radio.RadioMetadata;
import com.android.car.broadcastradio.support.Program;
import com.android.car.broadcastradio.support.platform.ProgramInfoExt;
import com.android.car.broadcastradio.support.platform.ProgramSelectorExt;

public class QtAndroidService extends Service {
    private static native void sendToQt(String message);
    private static native void sendToQtMediaInfo(String trackName, String artistName, String albumName, String duration);
    private static native void sendToQtMediaCurrPos(int pos);
    private static native void sendToQtSignalChange(String iconID, String iconStatus);
    private static native void sendToQtThumb(String thumbPath);
    private static native void sendToQtCleanMedia();
    private static native void sendToQtMusicVolume(int currVolume,int maxVolume,int minVolume);
    private static native void sendToQtDriverMode(String mode);
    private static native void sendToQtKeyCode(String keycode);
    private static native void sendToQtKneoUserID(String userName);
    private static native void sendTripCards(String odometer,String tripCardOne,String tripCardTwo);
    private static native void sendRadioInfo(int curridx,String currTitle,String currFreq, boolean updateList,String radiolist);
    private static native void sendLimitSpeed(boolean limitStatus,int speedValue);
    private static native void sendPacosStatus(boolean status);
    private static native void sendChargeModeStatus(String mode);
    private static final String TAG = "QtAndroidService";
    private final boolean TEST_DEBUG = true;/*測試數據*/
    private boolean currentReset = false;
    private boolean lastChargeReset = false;
    private boolean tripAReset = false;
    private boolean tripBReset = false;
    private IMyAidlInterface2 iMyAidlInterface2;

    private IMyAidlInterface iMyAidlInterface;
    private MediaItem mediaItem = new MediaItem();

    private IDriverAidlInterface iDriverAidlInterface;

    private IDriverCallback driverCallback = new IDriverCallback() {
            @Override
            public void onItemChangeCallback(String item) throws RemoteException {
                Log.i(TAG, "OnDriverCallback, item = " + item);
                if (item.equals("All")) {
                    String speedLimit = iDriverAidlInterface.getDriverData("SpeedLimiting");
                    String passengerAirbagSwitch = iDriverAidlInterface.getDriverData("PACOS");/*Passenger Airbag Cut Off Switch */
                    setSpeedLimit(speedLimit);
                    setPACOS(passengerAirbagSwitch);
                } else if (item.equals("SpeedLimiting")) {
                    String speedLimit = iDriverAidlInterface.getDriverData("SpeedLimiting");
                    setSpeedLimit(speedLimit);
                } else if (item.equals("PACOS")) {
                    String passengerAirbagSwitch = iDriverAidlInterface.getDriverData("PACOS");/*Passenger Airbag Cut Off Switch */
                    setPACOS(passengerAirbagSwitch);
                }
            }

            @Override
            public IBinder asBinder() {
                return null;
            }
        };

    private CarAudioManager mCarAudioManager = null;
    private Car mCar;

    boolean isBindMusicService = false;

    serviceStartBroadcastReceiver mBroadcastReceiver = new serviceStartBroadcastReceiver();
    private static final String ACTION_SERVICE_START_BROADCAST="MediaPlayerService.start.orRestart";

    /*行車模式廣播*/
    private static final String DRIVER_MODE_CHANGE_ACTION = "ivi.broadcast.action.DRIVER_MODE";
    private static final String DPAD_KEYEVENT = "ivi.broadcast.action.KeyEvent";/*接收鍵盤按鍵廣播*/
    private static final String KNEO_FACE_UNLOCK = "user_name_change";/*接收耐能解鎖成功廣播*/

    /*旅程模式切換廣播*/
    private static final String TRIP_MODE_CHANGE_ACTION = "broadcast.fxc.action.tripcardchange";/*接收CSD更改旅程模式*/

    /*旅程數值Reset廣播*/
    private static final String TRIP_MODE_RESETVALUE_ACTION = "broadcast.fxc.action.valuereset";/*接收CSD更改旅程模式*/

    /*接收CSD電台列表與當前播放電台*/
    private static final String EV_RADIO_PROGRAMS = "com.fxc.ev.radio.programs";

    /*限速模式ON/OFF*/
    private static final String SPEED_LIMIT_ACTION = "com.fxc.ev.speedlimit.status";/*限速模式廣播通知啟動or關閉*/

    /*充電狀態廣播*/
    private static final String CHARGE_MODE_CHANGE = "com.fxc.ev.broadcast.chargestatus";/*充電模式狀態*/


    @Override
    public void onCreate() {
        super.onCreate();
        Log.i(TAG, "Creating Service");
        initCanService();
        initMusicService();
        initDriverService();
        regBrocastReceiver();
        setCarAudioService();
        setTripInfo();
        sendToQt("Alan@test send to Qt123");
    }

    private void setCarAudioService() {
        mCar = Car.createCar(this);
        Log.i(TAG, "set Car AudioManager");
        mCarAudioManager = (CarAudioManager) mCar.getCarManager(Car.AUDIO_SERVICE);
        if(mCarAudioManager != null) {
            Log.i(TAG, "registerCarVolumeCallback");
            mCarAudioManager.registerCarVolumeCallback(mCarVolumeCallback);
        } else {
            Log.i(TAG, "mCarAudioManager == null");
        }

    }

    private CarAudioManager.CarVolumeCallback mCarVolumeCallback = new CarAudioManager.CarVolumeCallback(){
        @Override
        public void onGroupVolumeChanged(int zoneId, int groupId, int flags) {
            super.onGroupVolumeChanged(zoneId, groupId, flags);
            int maxvolume = mCarAudioManager.getGroupMaxVolume(zoneId,groupId);
            int minVolume = mCarAudioManager.getGroupMinVolume(zoneId,groupId);
            int currVolume = mCarAudioManager.getGroupVolume(zoneId,groupId);
            Log.i(TAG, "GroupMaxVolume = " + maxvolume);
            Log.i(TAG, "GroupMinVolume = " + minVolume);
            Log.i(TAG, "GroupVolume = " + currVolume);
            sendToQtMusicVolume(currVolume,maxvolume,minVolume);
        }

        @Override
        public void onMasterMuteChanged(int zoneId, int flags) {
            super.onMasterMuteChanged(zoneId, flags);
            Log.i(TAG, "onMasterMuteChanged");
            Log.i(TAG, "zoneId = " + zoneId);
            Log.i(TAG, "flags = " + flags);
        }
    };

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.i(TAG, "Destroying Service");
        unregisterReceiver(mBroadcastReceiver);
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void initCanService(){
        Log.d(TAG, "initCanService");
        Intent intent = new Intent();
        intent.setPackage("com.fxc.libCanWrapperNDK");
        intent.setAction("com.fxc.libCanWrapperNDK.MyService");
        bindService(intent, connCanService, Context.BIND_AUTO_CREATE);
        Log.d(TAG, "bindService");
    }

    private ServiceConnection connCanService = new ServiceConnection() {

        @Override
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            Log.d(TAG, "CanService onServiceConnected");
            iMyAidlInterface2 = IMyAidlInterface2.Stub.asInterface(iBinder);

            try {
                Log.d(TAG, "CanService registerCallback");
                iMyAidlInterface2.registerNotifyCallback(mICanStCallback);
            } catch (RemoteException e) {
                e.printStackTrace();
            }

        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            try {
                if(iMyAidlInterface2 != null)
                    iMyAidlInterface2.unregisterNotifyCallback(mICanStCallback);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            iMyAidlInterface2 = null;
            Log.i(TAG, "CanService iMyAidlInterface2 Disconnected");
        }
    };

    private ICanStCallback mICanStCallback = new ICanStCallback.Stub() {
        @Override
        public void onCallback(String aString) throws RemoteException {
            Log.d(TAG, "onCallback: " + aString);
            String[] mCanArray = aString.split(";");
            for (String mCanString:mCanArray) {
                String[] mSignalString = mCanString.split(",");
                Log.d(TAG, "mSignalString[0]: " + mSignalString[0]);
                Log.d(TAG, "mSignalString[1]: " + mSignalString[1]);
//                if (mSignalString[0].equals("ZGW_LTurnSignal_St")
//                    && (mSignalString[1].equals("Opened") || mSignalString[1].equals("Closed"))) {
//                    /*左-方向燈信號*/
//                    sendToQtSignalChange(mSignalString[0], mSignalString[1]);
//                } else if (mSignalString[0].equals("ZGW_RTurnSignal_St")
//                    && (mSignalString[1].equals("Opened") || mSignalString[1].equals("Closed"))) {
//                    /*右-方向燈信號*/
//                    sendToQtSignalChange(mSignalString[0], mSignalString[1]);
//                } else

                if (mSignalString[0].equals("ZGW_RHeadLampPower_St")
                    && (mSignalString[1].equals("Opened") || mSignalString[1].equals("Closed"))) {
                    /*大燈信號*/
                    sendToQtSignalChange(mSignalString[0], mSignalString[1]);
                    Log.d(TAG, "sendToQtSignalChange::mSignalString[0]: " + mSignalString[0] + ", mSignalString[1]:" + mSignalString[1]);
                } else if (mSignalString[0].equals("ZGW_RHighBeamPower_St")
                    && (mSignalString[1].equals("Opened") || mSignalString[1].equals("Closed"))) {
                    /*遠光燈信號*/
                    sendToQtSignalChange(mSignalString[0], mSignalString[1]);
                    Log.d(TAG, "sendToQtSignalChange::mSignalString[0]: " + mSignalString[0] + ", mSignalString[1]:" + mSignalString[1]);
                } else if (mSignalString[0].equals("ZGW_BrakeLamp_Req")
                    && (mSignalString[1].equals("Open") || mSignalString[1].equals("Close"))) {
                    /*煞車燈信號*/
                    sendToQtSignalChange(mSignalString[0], mSignalString[1]);
                    Log.d(TAG, "Danny1006::sendToQtSignalChange::mSignalString[0]: " + mSignalString[0] + ", mSignalString[1]:" + mSignalString[1]);
                }
            }

        }
    };

    public void initMusicService(){
        Log.d(TAG, "=====initMusicService=====");
        Intent intent = new Intent();
        intent.setAction("MediaPlayerService");
        intent.setPackage("com.fxc.ev.mediacenter");
        isBindMusicService = bindService(intent, musicConn, Context.BIND_AUTO_CREATE);
        Log.i(TAG, "connMusicService: isBindMusicService = " + isBindMusicService);
    }

    public void disConnMusicService(){
        Log.d(TAG, "=====disConnMusicService=====");
        unbindService(musicConn);
    }


    private ServiceConnection musicConn = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            Log.d(TAG, "Music Service onServiceConnected");
            iMyAidlInterface = IMyAidlInterface.Stub.asInterface(service);
            try {
                iMyAidlInterface.registerSetupNotification(mCallback);
                mediaItem = iMyAidlInterface.getMediaItem();
                Log.i(TAG, "startConnMusicService: mediaItem.getTitle() = "+mediaItem.getTitle());
                Log.i(TAG, "startConnMusicService: mediaItem.getAlbum() = "+mediaItem.getAlbum());
                Log.i(TAG, "startConnMusicService: mediaItem.getArtist() = "+mediaItem.getArtist());
                Log.i(TAG, "startConnMusicService: mediaItem.getDuration() = "+mediaItem.getDuration());
                int value = (int)(mediaItem.getDuration()/1000);
                String duration = String.valueOf(value);
                if(mediaItem.getTitle() == null || mediaItem.getDuration() == 0) {
                    Log.i(TAG, "startConnMusicService is null");
                }else {
                    String title = TextUtils.isEmpty(mediaItem.getTitle()) ? "":mediaItem.getTitle();
                    String artist = TextUtils.isEmpty(mediaItem.getArtist()) ? "":mediaItem.getArtist();
                    String album = TextUtils.isEmpty(mediaItem.getAlbum()) ? "":mediaItem.getAlbum();
                    duration = TextUtils.isEmpty(duration) ? "":duration;
                    sendToQtMediaInfo(title, artist, album, duration);
                    Log.i(TAG, "mediaItem.getThumbBitmap() = " + mediaItem.getThumbBitmap());
                    Bitmap bmp = mediaItem.getThumbBitmap();
                    if(bmp != null) {
                        String savePath = SavaImage(bmp);
                        Log.i(TAG, "saveThumbPath = " + savePath);
                        if(!TextUtils.isEmpty(savePath)){
                            sendToQtThumb(savePath);
                        }
                    } else {
                        Log.i(TAG, "Thumb bmp is null ");
                    }
                }
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            Log.d(TAG, "Music Service DisConnected");
            sendToQtCleanMedia();
            try {
                if(iMyAidlInterface != null)
                    iMyAidlInterface.unRegisterSetupNotification(mCallback);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            iMyAidlInterface = null;
        }
    };

    //供Server回调
    private IDataChangeListener mCallback = new IDataChangeListener.Stub() {
        @Override
        public void onContentChange(MediaItem item) throws RemoteException {
            Log.i(TAG, "我收到了onContentChange:item.getTitle() "+item.getTitle()+"\n item.getAlbum()"
                    +item.getAlbum()+"\n item.getArtist()"+item.getArtist()+"\n item.getDuration()"+item.getDuration());
            mediaItem = item;
            Log.i(TAG, "onContentChange: mediaItem.getTitle() = "+mediaItem.getTitle());
            Log.i(TAG, "onContentChange: mediaItem.getAlbum() = "+mediaItem.getAlbum());
            Log.i(TAG, "onContentChange: mediaItem.getArtist() = "+mediaItem.getArtist());
            Log.i(TAG, "onContentChange: mediaItem.getDuration() = "+mediaItem.getDuration());
            int value = (int)(mediaItem.getDuration()/1000);
            String duration = String.valueOf(value);
            String title = TextUtils.isEmpty(mediaItem.getTitle()) ? "":mediaItem.getTitle();
            String artist = TextUtils.isEmpty(mediaItem.getArtist()) ? "":mediaItem.getArtist();
            String album = TextUtils.isEmpty(mediaItem.getAlbum()) ? "":mediaItem.getAlbum();
            duration = TextUtils.isEmpty(duration) ? "":duration;
            sendToQtMediaInfo(title, artist, album, duration);
            Log.i(TAG, "sendToQtThumb");
            Log.i(TAG, "mediaItem.getThumbBitmap() = " + mediaItem.getThumbBitmap());
            Bitmap bmp = mediaItem.getThumbBitmap();
            if(bmp != null) {
                String savePath = SavaImage(bmp);
                Log.i(TAG, "mCallback::saveThumbPath = " + savePath);
                if(!TextUtils.isEmpty(savePath)){
                    sendToQtThumb(savePath);
                }
            } else {
                Log.i(TAG, "mCallback::Thumb bmp is null ");
            }
        }
        /**
         *  state:2,播放；5，暂停*/
        @Override
        public void onStateChange(int isPlaying) throws RemoteException {
            Log.i(TAG, "我收到了onContentChange:当前的状态 "+isPlaying);
        }

        @Override
        public void onDurationChange(long duration) throws RemoteException {
            int value = (int)(duration/1000);
//            Log.i(TAG, "onDurationChange: ");
//            Log.i(TAG, "duration =  " + duration);
//            Log.i(TAG, "value = " + value);
            sendToQtMediaCurrPos(value);
        }
    };

    private String SavaImage(Bitmap bitmap){
        String path = getCacheDir().getPath();
        String filepath = path+"/thumb.jpg";
        File file=new File(path);
        FileOutputStream fileOutputStream=null;

        if(!file.exists()){
            file.mkdir();
        }
        try {
            fileOutputStream= new FileOutputStream(filepath);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100,fileOutputStream);
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        return filepath;
    }

    public void initDriverService(){
        Log.d(TAG, "=====initDriverService=====");
        Intent intent = new Intent();
        intent.setPackage("com.fxc.ev.driverprofile");
        intent.setAction("DriverProfileService");
        bindService(intent, driverConn, Context.BIND_AUTO_CREATE);
    }

    public void disConnDriverService(){
        Log.d(TAG, "=====disConnDriverService=====");
        unbindService(driverConn);
    }

    private ServiceConnection driverConn = new ServiceConnection() {

        @Override
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            Log.d(TAG, "DriverService onServiceConnected");
            iDriverAidlInterface = IDriverAidlInterface.Stub.asInterface(iBinder);
            try {
                String speedLimit = iDriverAidlInterface.getDriverData("SpeedLimiting");
                String passengerAirbagSwitch = iDriverAidlInterface.getDriverData("PACOS");/*Passenger Airbag Cut Off Switch */
                setSpeedLimit(speedLimit);
                setPACOS(passengerAirbagSwitch);
            } catch (RemoteException e) {
                e.printStackTrace();
            }

            try {
                Log.d(TAG, "DriverService registerCallback");
                iDriverAidlInterface.registerCallback(driverCallback);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            iDriverAidlInterface = null;
            Log.i(TAG, "DriverService Disconnected");
        }
    };

    private void regBrocastReceiver() {
        Log.d(TAG, "regBrocastReceiver");
        IntentFilter filter = new IntentFilter();
        filter.addAction(ACTION_SERVICE_START_BROADCAST);
        filter.addAction(DRIVER_MODE_CHANGE_ACTION);
        filter.addAction(DPAD_KEYEVENT);
        filter.addAction(KNEO_FACE_UNLOCK);
        filter.addAction(TRIP_MODE_CHANGE_ACTION);
        filter.addAction(TRIP_MODE_RESETVALUE_ACTION);
        filter.addAction(EV_RADIO_PROGRAMS);
        filter.addAction(SPEED_LIMIT_ACTION);
        filter.addAction(CHARGE_MODE_CHANGE);

        registerReceiver(mBroadcastReceiver, filter);
    }

    public class serviceStartBroadcastReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.i(TAG, "onReceive::intent.Action = "+ intent.getAction());
            if(intent.getAction().equals(ACTION_SERVICE_START_BROADCAST)){
                /*FxcMusic Service 重啟廣播*/
                disConnMusicService();/*解除綁定音樂服務器*/
                initMusicService();/*重新綁定音樂服務器*/
            } else if (intent.getAction().equals(DRIVER_MODE_CHANGE_ACTION)) {
                /*launcher廣播通知變更行車模式*/
                String modeStr = intent.getStringExtra("mode");
                Log.i(TAG, "modeStr: "+ modeStr);
                sendToQtDriverMode(modeStr);
            } else if (intent.getAction().equals(DPAD_KEYEVENT)) {
                String keycodeStr = intent.getStringExtra("KeyCode");
                Log.i(TAG, "keycodeStr: "+ keycodeStr);
                sendToQtKeyCode(keycodeStr);
            } else if (intent.getAction().equals(KNEO_FACE_UNLOCK)) {
                String userName = intent.getStringExtra("userName");
                Log.i(TAG, "NKEO userName: "+ userName);
                sendToQtKneoUserID(userName);
            } else if (intent.getAction().equals(TRIP_MODE_CHANGE_ACTION)) {
                setTripInfo();
            } else if (intent.getAction().equals(TRIP_MODE_RESETVALUE_ACTION)) {
                String resetItem = intent.getStringExtra("resetItem");
                Log.i(TAG, "Trip resetItem: "+ resetItem);
                resetTripValue(resetItem);
            } else if (intent.getAction().equals(EV_RADIO_PROGRAMS)) {
                /*模擬接收到電台廣播，傳送數據到qml*/
                if(TEST_DEBUG){
                    boolean updateList = true;
                    int currRadioIdx = 3;
                    String currRadioName = "TEST RADIONAME";
                    String currRadioFreq = "TEST RADIOFREQ";
                    String arrayRadio = "";
                    ArrayList<String> radioList = new ArrayList();
                    for (int i = 0;i < 10;i++) {
                        radioList.add("title_"+i+"&"+"info_"+i);
                    }
                    if (radioList.size() != 0) {
                        String string = radioList.toString();
                        arrayRadio = string.substring(1,string.length()-1);
                        sendRadioInfo(currRadioIdx,currRadioName,currRadioFreq,updateList,arrayRadio);
                    }
                } else {
                    Bundle bundle = intent.getBundleExtra("radio_programs");
                    if (bundle != null) {
                        boolean updateList = bundle.getBoolean("program_update");/*是否要更新電台列表*/
                        int currRadioIdx = bundle.getInt("radio_index");/*當前播放的電台在電台列表中的index*/
                        ProgramSelector currSelector = bundle.getParcelable("radio_selector");/*當前播放的電台(含微調控制)*/
                        String currRadioName = "";
                        String currRadioFreq = "";
                        String arrayRadio = "";
                        if(currSelector != null) {
                            currRadioName = new Program(currSelector,ProgramSelectorExt.getDisplayName(
                                    currSelector, ProgramSelectorExt.NAME_NO_PROGRAM_TYPE_FALLBACK)).getName();/*當前播放的電台名稱*/
                            currRadioFreq = ProgramSelectorExt.getDisplayName(
                                    currSelector, ProgramSelectorExt.NAME_NO_MODULATION);/*當前播放的電台頻率*/
                        }
                        ArrayList<String> radioList = new ArrayList();
                        ArrayList<RadioManager.ProgramInfo> programInfos = bundle.getParcelableArrayList("radio_programs");/*電台列表*/
                        if(programInfos.size() != 0) {
                            for (RadioManager.ProgramInfo programInfo:programInfos) {
                                ProgramSelector sel = programInfo.getSelector();
                                RadioMetadata metadata = ProgramInfoExt.getMetadata(programInfo);
                                String programTitle = metadata.getString(RadioMetadata.METADATA_KEY_RDS_PS);
                                String programModulation = ProgramSelectorExt.getDisplayName(sel,ProgramSelectorExt.NAME_NO_MODULATION);
                                Log.i(TAG, "radio Title: "+ programTitle);
                                Log.i(TAG, "radio Modulation: "+ programModulation);
                                radioList.add(programTitle + "&" + programModulation);
                            }
                        }
                        Log.i(TAG, "radioList = "+ radioList.toString());
                        if (radioList.size() != 0) {
                            String string = radioList.toString();
                            arrayRadio = string.substring(1,string.length()-1);
                            sendRadioInfo(currRadioIdx,currRadioName,currRadioFreq,updateList,arrayRadio);
                        }
                    }
                }
            } else if (intent.getAction().equals(SPEED_LIMIT_ACTION)) {
                /*檢查限速開關*/
            } else if (intent.getAction().equals(CHARGE_MODE_CHANGE)) {
                String statusStr = intent.getStringExtra("status");
                Log.i(TAG, "charge mode statusStr: "+ statusStr);
                sendChargeModeStatus(statusStr);
            }
        }
    }

    private void resetTripValue(String resetItem) {
        Log.i(TAG, "resetTripValue");
        if (resetItem.equals("TripA")) {
            tripAReset = true;
        } else if (resetItem.equals("TripB")) {
            tripBReset = true;
        }
        setTripInfo();
    }

    private void setTripInfo(){
        Log.i(TAG, "setTripInfo");
        String value = SystemPropUtil.getprop("persist.fxc.ev.tripui","");
        Log.i(TAG, "persist.fxc.ev.tripui value = "+ value);
        if (!TextUtils.isEmpty(value)) {
            String[] array = value.split(",");
            String odometer = "288,511";
            ArrayList<String> TripInfo = new ArrayList<>();
            for (int i = 0; i < array.length; i++) {
                Log.i(TAG, "trip i = " + i);
                if (!TextUtils.isEmpty(array[i])) {
                    String name = array[i];
                    String km = "0";
                    String h = "0";
                    String min = "0";
                    String kwh = "0";
                    if (i == 0 && currentReset == false) {
                        /*Current*/
                        km = "2010";
                        h = "2";
                        min = "46";
                        kwh = "500";
                    } else if (i == 1 && lastChargeReset == false) {
                        /*Last Charge*/
                        km = "5555";
                        h = "8";
                        min = "20";
                        kwh = "5000";
                    } else if (i == 2 && tripAReset == false) {
                        /*Trip A*/
                        km = "555";
                        h = "4";
                        min = "10";
                        kwh = "600";
                    } else if (i == 3 && tripBReset == false) {
                        /*Trip B*/
                        km = "5550";
                        h = "41";
                        min = "40";
                        kwh = "6660";
                    }
                    String tripCard = name +","+ km +","+ h +","+ min +","+ kwh;
                    Log.i(TAG, "tripCard = " + tripCard);
                    TripInfo.add(tripCard);
                    if (TripInfo.size() == 2)
                        break;
                }
            }
            if (TripInfo.size() == 1) {
                Log.i(TAG, "sendTripCards size = 1");
                sendTripCards(odometer,TripInfo.get(0),"");
            } else if(TripInfo.size() == 2) {
                Log.i(TAG, "sendTripCards size = 2");
                sendTripCards(odometer,TripInfo.get(0),TripInfo.get(1));
            } else {
                Log.i(TAG, "sendTripCards Error");
            }
        }
    }

    private void setSpeedLimit(String speedLimitValue){
        Log.i(TAG, "speedLimitValue = "+ speedLimitValue);
        if (TextUtils.isEmpty(speedLimitValue)) {
            Log.i(TAG, "Speed Limit status is Close");
            sendLimitSpeed(false,0);
        } else {
            Log.i(TAG, "Speed Limit status is Open");
            sendLimitSpeed(true,Integer.valueOf(speedLimitValue));
        }
    }

    private void setPACOS(String passengerAirbagSwitch){
        if (passengerAirbagSwitch.equals("1")) {
            /*副駕安全氣囊功能正常啟用*/
            sendPacosStatus(true);
        } else if (passengerAirbagSwitch.equals("0")) {
            /*副駕安全氣囊功能關閉*/
            sendPacosStatus(false);
        } else {
            Log.i(TAG, "PACOS not set value");
        }
    }
}
